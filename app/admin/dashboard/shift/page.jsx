"use client";
import { useEffect, useState } from "react";
import ProtectedRoute from "../../components/ProtectedRoute";
import TableItems from "../../components/table/Table";
import Box from "@mui/material/Box";
import {
  Card,
  CardAction,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Typography from "@mui/material/Typography";
import { toast, ToastContainer } from "react-toastify";
import ShiftCard from "../../components/shift/ShiftCard";
import ShiftButton from "../../components/shift/ShiftButton";

import { useAuth } from "../../context/authContext";
import axios from "axios";
const shiftHeaders = [
  "–û–Ω —Å–∞—Ä ”©–¥”©—Ä",
  "–ú–µ–Ω–µ–∂–µ—Ä ",
  "–≠—ç–ª–∂",
  "–ê–∂–∏–ª—á–∏–¥—ã–Ω —Ç–æ–æ",
  "–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π",
];
export default function ShiftPage() {
  const [shift, setShift] = useState([]);
  const [tableShifts, setTableShifts] = useState([]);
  const { user } = useAuth();
  const fetchShifts = () => {
    if (!user || !user.token) return;

    axios
      .get(`http://localhost:5000/api/shifts`, {
        headers: {
          Authorization: `Bearer ${user.token}`,
        },
      })
      .then((res) => {
        const formattedData = res.data.map((shift) => {
          const employeeRoles = [
            "manager",
            "chef",
            "waiter",
            "security",
            "cleaner",
          ];
          const employeeDetails = employeeRoles.map((role) => {
            const emp = shift.employees?.[role];
            const img = emp?.img?.data?.data
              ? `data:${emp.img.contentType};base64,${Buffer.from(
                  emp.img.data.data
                ).toString("base64")}`
              : null;

            return emp
              ? {
                  role,
                  name: emp.name,
                  phone: emp.phone,
                  position: emp.position,
                  image: img,
                }
              : {
                  role,
                  name: "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π",
                  phone: "-",
                  position: role,
                  image: null,
                };
          });

          // üîç –ú–µ–Ω–µ–∂–µ—Ä–∏–π–Ω –Ω—ç—Ä–∏–π–≥ —Ç—É—Å–∞–¥ –Ω—å –æ–ª–æ—Ö
          const managerInfo = employeeDetails.find((e) => e.role === "manager");

          return {
            id: shift._id,
            date: shift.date?.slice(0, 10) || "–û–≥–Ω–æ–æ –±–∞–π—Ö–≥“Ø–π",
            manager: managerInfo?.name || "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π",
            shiftType: shift.shiftType || "Shift —Ç”©—Ä”©–ª –∞–ª–≥–∞",
            employeeCount: employeeDetails.filter(
              (e) => e.name !== "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"
            ).length,
            details: employeeDetails,
          };
        });

        // üìÑ –•“Ø—Å–Ω—ç–≥—Ç—ç–¥ —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
        const tableFormatted = formattedData.map((item) => ({
          id: item.id,
          row: [
            item.date,
            item.manager, // ‚úÖ –∑”©–≤—Ö”©–Ω –º–µ–Ω–µ–∂–µ—Ä–∏–π–Ω –Ω—ç—Ä
            item.shiftType,
            item.employeeCount,
            item.details,
          ],
        }));

        setShift(formattedData); // –ë“Ø—Ö –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
        setTableShifts(tableFormatted); // –ó”©–≤—Ö”©–Ω —Ö“Ø—Å–Ω—ç–≥—Ç—ç–Ω–¥ —Ö–∞—Ä–∞–≥–¥–∞—Ö
        console.log("Table", tableFormatted);
      })
      .catch((err) => {
        console.log("Shift –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", err);
      });
  };

  useEffect(() => {
    if (user && user.token) {
      fetchShifts();
    }
  }, [user]);
  return (
    <ProtectedRoute allowedRoles={["manager"]}>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          minHeight: "100vh",
          bgcolor: "white",
          p: 5,
        }}
      >
        <ToastContainer />
        <Typography>–≠—ç–ª–∂–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª</Typography>
        <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 1 }}>
          <Box sx={{ flexGrow: 1 }}>
            <ShiftCard shiftType="”®–≥–ª”©”©–Ω–∏–π —ç—ç–ª–∂" shifts={shift} onDelete={fetchShifts} />
          </Box>
          <Box sx={{ flexGrow: 1 }}>
            <ShiftCard shiftType="–û—Ä–æ–π–Ω —ç—ç–ª–∂" shifts={shift} onDelete={fetchShifts} />
          </Box>
          <Box sx={{ flexGrow: 1 }}>
            <ShiftButton onSuccess={fetchShifts} />

            <Card className="w-full max-w-sm">
              <CardHeader>
                <CardTitle>–ù–∏–π—Ç –∞–∂–∏–ª—á–∏–¥</CardTitle>
                <CardDescription>”®–Ω”©”©–¥”©—Ä –∞–∂–∏–ª—Å–∞–Ω –∞–∂–∏–ª—á–∏–¥</CardDescription>
              </CardHeader>
              <CardContent>8555</CardContent>
            </Card>
          </Box>
        </Box>
        <TableItems
          caption="–°–∞–ª–±–∞—Ä—É—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç"
          headers={shiftHeaders}
          rows={tableShifts}
          // onEdit={handleEdit}
          // onDelete={handleDelete}
        />
      </Box>

      {/* <DeleteItems
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onConfirm={confirmDelete}
      /> */}
    </ProtectedRoute>
  );
}
